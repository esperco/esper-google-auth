(* https://developers.google.com/youtube/v3/guides/authentication *)

type oauth_token_result = {
  ?access_token : string option;
  ?refresh_token: string option;
  ?expires_in   : float  option;
  ?error        : string option;
}
(*
  Google will respond to your POST request by returning a JSON object
  that contains a short-lived access token and a refresh token.
{
  "access_token" : "ya29.AHES6ZTtm7SuokEB-RGtbBty9IIlNiP9-eNMMQKtXdMP3sfjL1Fc",
  "token_type" : "Bearer",
  "expires_in" : 3600,
  "refresh_token" : "1/HKSmLFXzqP0leUihZp2xUt3-5wkU7Gmu2Os_eBnzw74"
}
*)

(*
   State passed along during the Google OAuth process.
*)
type state = {
  ?login_nonce: string option;
    (* Secret chosen by the client and passed through Google authentication
       to the Esper server.

       1. Client starts the oauth process, passing this newly-generated
          secret to Google.
       2. Once the user is authenticated with Google, Googles posts
          the secret to Esper. Esper now knows that this secret belongs to
          the Google account owner.
       3. At the end of the oauth process, the user is redirected to an
          Esper page.
       4. The secret is posted from the Esper page, and the Esper server
          responds with login info, including the api_secret that
          will be used for Esper API queries.
    *)

  ?invite: token option;
    (* invite token, which results in the creation of an api_secret for
       the user, making the user a full Esper member. *)

  ?ok_url: string option;
    (* landing URL when everything was successful *)
}

type token_info = {
  issuer    : string;        (* "accounts.google.com" *)
  audience  : string;        (* our client ID *)
  expires_in: float;         (* seconds *)
  issued_at : float;         (* date *)
  ?email    : string option; (* user's authorization email *)
  (* more fields omitted *)
} <ocaml field_prefix="token_">

type uid <ocaml from="Core" t="uid"> = abstract
type token <ocaml from="Core" t="token"> = abstract
